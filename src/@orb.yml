version: 2.1

description: >
  An orb for working with Google Container Registry (GCR)

examples:
  simple_build_and_push:
    description: Log into Google Cloud Plaform, build and push image to GCR
    usage:
      version: 2.1

      orbs:
        gcp-gcr: circleci/gcp-gcr@1.0.0

      workflows:
        build_and_push_image:
          jobs:
            - gcp-gcr/build_and_push_image:
                context: myContext # your context containing gcloud login variables
                google-project-id: myGoogleProjectId
                google-compute-zone: myGoogleComputeZone
                registry-url: us.gcr.io # gcr.io, eu.gcr.io, asia.gcr.io
                image: my-image # your image name
                tag: latest

orbs:
  gcp-cli: circleci/gcp-cli@1.0.2

executors:
  default:
    description: >
      A debian-based machine executor.
    machine: true

commands:
  gcr-auth:
    description: >
      Configure Docker to use gcloud as a credential helper. Using this command requires the use of a 'machine' executor.
    parameters:
      gcloud-service-key:
        description: The gcloud service key
        type: env_var_name
        default: GCLOUD_SERVICE_KEY
      google-project-id:
        description: Environment variable name for the Google project ID to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      google-compute-zone:
        description: The Google compute zone to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_COMPUTE_ZONE
    steps:
      - gcp-cli/install
      - gcp-cli/initialize:
          google-project-id: <<parameters.google-project-id>>
          google-compute-zone: <<parameters.google-compute-zone>>
      - run:
          name: gcloud alpha auth configure-docker
          command: |
            # Set sudo to work whether logged in as root user or non-root user
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

            # configure Docker to use gcloud as a credential helper
            mkdir -p /home/circleci/.docker
            $SUDO gcloud alpha auth configure-docker --quiet --project $<<parameters.google-project-id>>

            # if applicable, provide circleci user access to the docker config file
            if [[ -d /home/circleci/.docker ]]; then
              $SUDO chown circleci:circleci /home/circleci/.docker -R
            fi
            if [[ -d /home/circleci/.config ]]; then
              $SUDO chown circleci:circleci /home/circleci/.config -R
            fi

  build-image:
    description: Build a docker image
    parameters:
      registry-url:
        description: The GCR registry URL from ['', us, eu, asia].gcr.io
        type: string
        default: gcr.io
      google-project-id:
        description: The Google project ID to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      image:
        description: A name for your docker image
        type: string
      tag:
        description: A docker image tag
        type: string
        default: "latest"
      path-to-dockerfile:
        description: The relative path to the Dockerfile to use when building image
        type: string
        default: "."
    steps:
      - run:
          name: Build docker image
          command: docker build -t <<parameters.registry-url>>/$<<parameters.google-project-id>>/<<parameters.image>>:<<parameters.tag>> <<parameters.path-to-dockerfile>>
  push-image:
    description: "Push a container image to the GCR registry"
    parameters:
      registry-url:
        description: The GCR registry URL from ['', us, eu, asia].gcr.io
        type: string
        default: gcr.io
      google-project-id:
        description: The Google project ID to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      image:
        description: A name for your docker image
        type: string
      tag:
        description: A docker image tag
        type: string
        default: "latest"
    steps:
      - run:
          name: Push image to GCR
          command: |
            docker push <<parameters.registry-url>>/$<<parameters.google-project-id>>/<<parameters.image>>:<<parameters.tag>>
jobs:
  build_and_push_image:
    description: >
      Install GCP CLI, if needed, and configure. Build and push image to repository.
      Requires environment variable for GCLOUD_SERVICE_KEY.
    executor: default
    parameters:
      gcloud-service-key:
        description: The gcloud service key
        type: env_var_name
        default: GCLOUD_SERVICE_KEY
      google-project-id:
        description: The Google project ID to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      google-compute-zone:
        description: The Google compute zone to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_COMPUTE_ZONE
      registry-url:
        description: The GCR registry URL from ['', us, eu, asia].gcr.io
        type: string
        default: gcr.io
      image:
        description: A name for your docker image
        type: string
      tag:
        description: A docker image tag
        type: string
        default: "latest"
      path-to-dockerfile:
        description: The relative path to the Dockerfile to use when building image
        type: string
        default: "."
    steps:
      - checkout
      - gcr-auth:
          gcloud-service-key: <<parameters.gcloud-service-ke>>
          google-project-id: <<parameters.google-project-id>>
          google-compute-zone: <<parameters.google-compute-zone>>
      - build-image:
          registry-url: <<parameters.registry-url>>
          google-project-id: <<parameters.google-project-id>>
          image: <<parameters.image>>
          tag: << parameters.tag >>
          path-to-dockerfile: <<parameters.path-to-dockerfile>>
      - push-image:
          registry-url: <<parameters.registry-url>>
          google-project-id: <<parameters.google-project-id>>
          image: <<parameters.image>>
          tag: <<parameters.tag>>
